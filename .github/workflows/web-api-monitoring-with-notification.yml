---
name: Synthetic web API monitoring with Slack notification
on:
  workflow_call:
    inputs:
      api-url:
        required: true
        type: string
        description: Web API URL to call
      http-method:
        required: false
        type: string
        description: HTTP method (e.g., GET, POST, PUT, DELETE)
        default: GET
      expected-status:
        required: false
        type: string
        description: HTTP status code considered a success
        default: '200'
      fail-on-unexpected:
        required: false
        type: boolean
        description: Whether to fail the job on unexpected status
        default: false
      headers:
        required: false
        type: string
        description: >
          Extra HTTP headers, newline-separated (e.g., 'Authorization: Bearer TOKEN')
        default: null
      body:
        required: false
        type: string
        description: Request payload for POST/PUT requests
        default: null
      slack-channel-id:
        required: false
        type: string
        description: Slack channel name or ID (optional if webhook is channel-bound)
        default: null
      notify-on-expected:
        required: false
        type: boolean
        description: Whether to send a Slack notification even on expected status
        default: true
      message-title:
        required: false
        type: string
        description: Title for the Slack message
        default: 'API Health Check :heartbeat:'
      mask-response-body:
        required: false
        type: boolean
        description: Whether to mask the response body in the Slack message
        default: false
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  synthetic-api-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Call the external API and capture the HTTP status code
        id: external-api-call
        env:
          API_URL: ${{ inputs.api-url }}
          HTTP_METHOD: ${{ inputs.http-method }}
          BODY: ${{ inputs.body }}
          HEADERS: ${{ inputs.headers }}
          TMP_RESPONSE_BODY_TXT_PATH: /tmp/response_body.txt
          MASK_RESPONSE_BODY: ${{ inputs.mask-response-body }}
        run: |
          commands=(curl -sSL -o "${TMP_RESPONSE_BODY_TXT_PATH}" -w "%{http_code}" -X "${HTTP_METHOD}" "${API_URL}")
          if [[ -n "${BODY}" ]]; then
            commands+=(--data "${BODY}")
          fi
          if [[ -n "${HEADERS}" ]]; then
            while IFS= read -r line; do
              commands+=(-H "${line}")
            done <<< "${HEADERS}"
          fi
          status=$("${commands[@]}")
          response_body=$(cat "${TMP_RESPONSE_BODY_TXT_PATH}")
          {
            echo "status=${status}"
            echo "response_body=${response_body}"
          } >> "${GITHUB_OUTPUT}"
      - name: Classify result, build Slack message fields
        id: result
        env:
          EXPECTED_STATUS: ${{ inputs.expected-status }}
          RETURNED_STATUS: ${{ steps.external-api-call.outputs.status }}
          MASK_RESPONSE_BODY: ${{ inputs.mask-response-body }}
          RESPONSE_BODY: ${{ steps.external-api-call.outputs.response_body }}
        run: |
          {
            if [[ "${RETURNED_STATUS}" = "${EXPECTED_STATUS}" ]]; then
              echo 'color=good'
              echo 'text=:white_check_mark: API is healthy.'
            else
              echo 'color=danger'
              echo 'text=:x: API is unhealthy.'
            fi
            echo "summary_plain=API responded ${RETURNED_STATUS} (expected ${EXPECTED_STATUS})"
            echo "ts=$(date +%s)"
            if [[ ${MASK_RESPONSE_BODY} ]]; then
              echo 'response_body=[MASKED]'
            else
              echo "response_body=${RESPONSE_BODY}"
            fi
          } >> "${GITHUB_OUTPUT}"
      - name: Send Slack notification (always runs)
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ inputs.slack-channel-id }}
            attachments:  # https://api.slack.com/reference/messaging/attachments
              - fallback: ${{ steps.result.outputs.summary_plain }}
                mrkdwn_in:
                  - text
                color: ${{ steps.result.outputs.color }}
                author_name: GitHub Actions
                author_link: ${{ github.server_url }}/${{ github.repository }}
                author_icon: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
                title: ${{ inputs.message-title }}
                title_link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                text: ${{ steps.result.outputs.text }}
                fields:
                  - title: URL
                    value: ${{ inputs.api-url }}
                    short: false
                  - title: HTTP Method
                    value: ${{ inputs.http-method }}
                    short: true
                  - title: Expected
                    value: ${{ inputs.expected-status }}
                    short: true
                  - title: Returned
                    value: ${{ steps.external-api-call.outputs.status }}
                    short: true
                  - title: Response Body
                    value: ${{ steps.external-api-call.outputs.response_body }}
                    short: true
                footer: Commit - ${{ github.sha }}
                footer_icon: https://platform.slack-edge.com/img/default_application_icon.png
                ts: ${{ steps.result.outputs.ts }}
      - name: Fail the job when the API status was unexpected
        if: inputs.fail-on-unexpected == 'true' && steps.result.outputs.color != 'good'
        env:
          SUMMARY: ${{ steps.result.outputs.summary_plain }}
        run: |
          echo "${SUMMARY}" >&2
          exit 1
