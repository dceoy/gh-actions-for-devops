---
name: CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:
    inputs:
      workflow:
        required: true
        type: choice
        options:
          - lint
          - analyze
          - format
          - build
          - release
        description: Choose the workflow to run
        default: lint
jobs:
  python-lint-and-scan:
    if: >
      github.event_name == 'push'
      || github.event_name == 'pull_request'
      || (github.event_name == 'workflow_dispatch' && inputs.workflow == 'lint')
    uses: ./.github/workflows/python-package-lint-and-scan.yml
    with:
      package-path: ./src
      python-version: 3.x
      mypy-options: --install-types --non-interactive
      bandit-options: --recursive
  github-actions-lint:
    if: >
      github.event_name == 'push'
      || github.event_name == 'pull_request'
      || (github.event_name == 'workflow_dispatch' && inputs.workflow == 'lint')
    uses: ./.github/workflows/github-actions-lint.yml
    with:
      search-path: .github/workflows
      go-version: stable
      python-version: 3.x
  toml-lint:
    if: >
      github.event_name == 'push'
      || github.event_name == 'pull_request'
      || (github.event_name == 'workflow_dispatch' && inputs.workflow == 'lint')
    uses: ./.github/workflows/toml-lint.yml
    with:
      search-path: .github/workflows
      go-version: stable
  python-format:
    if: >
      github.event_name == 'push'
      || github.event_name == 'pull_request'
      || (github.event_name == 'workflow_dispatch' && inputs.workflow == 'format')
    uses: ./.github/workflows/python-package-format-and-pr.yml
    with:
      package-path: ./src
      python-version: 3.x
  docker-lint-and-scan:
    if: >
      github.event_name == 'push'
      || github.event_name == 'pull_request'
      || (github.event_name == 'workflow_dispatch' && inputs.workflow == 'lint')
    uses: ./.github/workflows/docker-lint-and-scan.yml
    with:
      dockerfile-paths: ./src/Dockerfile
  docker-build-and-push:
    if: >
      github.event_name == 'workflow_dispatch' && inputs.workflow == 'build'
    uses: ./.github/workflows/docker-build-and-push.yml
    with:
      registry: ghcr.io
      registry-user: ${{ github.actor }}
      image-name: ${{ github.repository }}
      platforms: linux/amd64,linux/arm64
      context: ./src
      file: ./src/Dockerfile
      push: true
      image-artifact-name: docker-image
    secrets:
      DOCKER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  github-codeql-analysis:
    if: >
      github.event_name == 'push'
      || (github.event_name == 'workflow_dispatch' && inputs.workflow == 'analyze')
    uses: ./.github/workflows/github-codeql-analysis.yml
    with:
      language: >
        ["python"]
  github-release:
    if: >
      github.event_name == 'workflow_dispatch' && inputs.workflow == 'release'
    uses: ./.github/workflows/github-release.yml
    with:
      create-new-tag: false
  dependabot-auto-merge:
    if: >
      github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'
    needs:
      - python-lint-and-scan
      - github-actions-lint
      - toml-lint
      - docker-lint-and-scan
    uses: ./.github/workflows/dependabot-auto-merge.yml
    with:
      unconditional: true
  update-readme-md:
    if: >
      github.event_name == 'push'
      || github.event_name == 'pull_request'
      || (github.event_name == 'workflow_dispatch' && inputs.workflow == 'format')
    permissions:
      contents: write
      pull-requests: write
    defaults:
      run:
        shell: bash -euo pipefail {0}
        working-directory: .
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install packages
        run: |
          pip install -U --no-cache-dir poetry
          poetry -C ./src install --no-interaction --without dev
      - name: Update README.md
        run: |
          poetry -C ./src run python ./src/build_readme_md.py
      - name: Commit and push the changes
        uses: EndBug/add-and-commit@v9
        with:
          add: ./README.md
          message: Update README.md
          push: true
