---
name: Upgrade of Terraform lock files
on:
  workflow_call:
    inputs:
      terraform-working-directories:
        required: false
        type: string
        description: Terraform working directories (separated by spaces or returns)
        default: .
      terraform-working-directory-to-version-tf-json:
        required: false
        type: string
        description: JSON object with Terraform working directories as keys and Terraform version files as values
        default: null
      terragrunt-working-directories:
        required: false
        type: string
        description: Terragrunt working directories (separated by spaces or returns)
        default: null
      terraform-version:
        required: false
        type: string
        description: Terraform version to use
        default: latest
      create-pr:
        required: false
        type: boolean
        description: Create a pull request instead of committing directly
        default: false
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
permissions:
  contents: write
  pull-requests: write
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  upgrade-and-commit:
    runs-on: ${{ inputs.runs-on }}
    env:
      COMMIT_MESSAGE: Upgrade Terraform lock files
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Upgrade Terraform lock files
        env:
          TERRAFORM_LOCK_FILE: .terraform.lock.hcl
          TERRAFORM_INIT: terraform init -backend=false -upgrade -reconfigure && rm -rf .terraform
        run: |
          if [[ -n '${{ inputs.terraform-working-directory-to-version-tf-json }}' ]]; then
            echo '${{ inputs.terraform-working-directory-to-version-tf-json }}' \
              | jq -r "to_entries[] | \"cp \\(.value) \\(.key) && cd \\(.key) && ${TERRAFORM_INIT} && rm -f \$(basename \\(.value))\"" \
              | xargs -I{} -t bash -c '{}'
            echo '${{ inputs.terraform-working-directory-to-version-tf-json }}' \
              | jq -r 'keys[]' \
              | xargs -I{} find {} -type f -name "${TERRAFORM_LOCK_FILE}" \
              | jq -rRs 'split("\n")[:-1] | "UPDATED_FILES_JSON=\(.)"' \
              | tee -a "${GITHUB_ENV}"
          elif [[ -n '${{ inputs.terragrunt-working-directories }}' ]]; then
            updated_files_txt="$(mktemp)"
            echo '${{ inputs.terragrunt-working-directories }}' \
              | tr ' ' '\n' \
              | xargs -I{} find {} -type f -name "${TERRAFORM_LOCK_FILE}" \
              > "${updated_files_txt}"
            xargs dirname < "${updated_files_txt}" \
              | xargs realpath \
              | xargs -I{} -t bash -c \
                "cd \"{}/../../../modules/\$(basename {})\" && ${TERRAFORM_INIT} && mv ${TERRAFORM_LOCK_FILE} {}"
            jq -rRs 'split("\n")[:-1] | "UPDATED_FILES_JSON=\(.)"' "${updated_files_txt}" \
              | tee -a "${GITHUB_ENV}"
            rm -f "${updated_files_txt}"
          else
            echo '${{ inputs.terraform-working-directories }}' \
              | tr ' ' '\n' \
              | xargs -I{} -t bash -c "cd {} && ${TERRAFORM_INIT}"
            echo '${{ inputs.terraform-working-directories }}' \
              | tr ' ' '\n' \
              | xargs -I{} find {} -type f -name "${TERRAFORM_LOCK_FILE}" \
              | jq -rRs 'split("\n")[:-1] | "UPDATED_FILES_JSON=\(.)"' \
              | tee -a "${GITHUB_ENV}"
          fi
      - name: Validate the code using terraform validate
        env:
          TERRAFORM_LOCK_FILE: .terraform.lock.hcl
          TERRAFORM_VALIDATE: terraform init -backend=false && terraform validate && rm -rf .terraform
        run: |
          if [[ -n '${{ inputs.terraform-working-directory-to-version-tf-json }}' ]]; then
            echo '${{ inputs.terraform-working-directory-to-version-tf-json }}' \
              | jq -r 'values[]' \
              | xargs dirname \
              | sort -u \
              | xargs -I{} -t bash -c "cd {} && ${TERRAFORM_VALIDATE}"
          elif [[ -n '${{ inputs.terragrunt-working-directories }}' ]]; then
            echo '${{ inputs.terragrunt-working-directories }}' \
              | tr ' ' '\n' \
              | xargs -I{} find {} -type f -name "${TERRAFORM_LOCK_FILE}" \
              | sort -u \
              | xargs dirname \
              | xargs -I{} -t bash -c "cd \"{}/../../../modules/\$(basename {})\" && ${TERRAFORM_VALIDATE}"
          else
            echo '${{ inputs.terraform-working-directories }}' \
              | tr ' ' '\n' \
              | xargs -I{} -t bash -c "cd {} && ${TERRAFORM_VALIDATE}"
          fi
      - name: Commit and push the changes
        if: (! inputs.create-pr)
        uses: EndBug/add-and-commit@v9
        with:
          add: ${{ env.UPDATED_FILES_JSON }}
          message: ${{ env.COMMIT_MESSAGE }}
          push: true
      - name: Detect changed files and create a pull request
        if: inputs.create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ env.COMMIT_MESSAGE }}
          title: ${{ env.COMMIT_MESSAGE }}
          branch: autopr/${{ github.head_ref || github.ref_name }}
          labels: automated pr
          body: |
            This PR contains the following updates:

            - ${{ env.COMMIT_MESSAGE }}

            This PR has been generated by
            [${{ github.workflow_ref }}](https://github.com/${{ github.repository }}/).
          delete-branch: true
          draft: false
