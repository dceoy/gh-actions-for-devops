---
name: Formatting for Python
on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
        description: Path to a Python package or project
        default: .
      python-version:
        required: false
        type: string
        description: Python version to use
        default: 3.x
      black-options:
        required: false
        type: string
        description: Additional options to pass to black
        default: --line-length=88
      ruff-format-options:
        required: false
        type: string
        description: Additional options to pass to ruff format
        default: --line-length=88
      isort-options:
        required: false
        type: string
        description: Additional options to pass to isort
        default: --skip-glob=build --profile=black
      ruff-check-options:
        required: false
        type: string
        description: Additional options to pass to ruff check
        default: null
      use-black:
        required: false
        type: boolean
        description: Use black to format the code
        default: false
      pypi-packages:
        required: false
        type: string
        description: Additional packages to install
        default: null
      lint-before-pr:
        required: false
        type: boolean
        description: Run lint before creating a pull request
        default: true
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
    secrets:
      GH_TOKEN:
        required: false
        description: GitHub token
permissions:
  contents: write
  pull-requests: write
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  format-and-pr:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install packages
        env:
          POETRY_HOME: /opt/poetry
        working-directory: ${{ inputs.package-path }}
        run: >
          if [[ -f poetry.lock ]]; then
            pip install -U --no-cache-dir poetry
            poetry lock --no-update --no-interaction
            poetry add --group=dev --no-interaction \
              isort ${{ inputs.use-black && 'black' || 'ruff' }} ${{ inputs.pypi-packages }}
            poetry install --no-interaction
            echo "PATH=$(poetry env info --path)/bin:${PATH}" | tee -a "${GITHUB_ENV}"
          else
            pip install -U --no-cache-dir \
              isort ${{ inputs.use-black && 'black' || 'ruff' }} ${{ inputs.pypi-packages }}
          fi
      - name: Format the code using black
        if: inputs.use-black
        run: >
          black ${{ inputs.black-options }} ${{ inputs.package-path }}
      - name: Format the code using ruff
        if: (! inputs.use-black)
        run: >
          ruff format ${{ inputs.ruff-format-options }} ${{ inputs.package-path }}
      - name: Sort Python import definitions using isort
        run: >
          isort ${{ inputs.isort-options }} ${{ inputs.package-path }}
      - name: Lint the code using ruff
        if: inputs.lint-before-pr
        run: >
          ruff check ${{ inputs.ruff-check-options }} ${{ inputs.package-path }}
      - name: Create output parameters
        id: parameters
        env:
          PR_BASE: ${{ github.head_ref || github.ref_name }}
        run: |
          if [[ ${{ inputs.use-black }} == true ]]; then
            formatters='ruff and isort'
          else
            formatters='black and isort'
          fi
          {
            echo "COMMIT_MESSAGE=Reformat Python code using ${formatters}"
            echo "PR_BASE=${PR_BASE}"
            echo "PR_BRANCH=automatedpr/${PR_BASE}"
          } >> "${GITHUB_OUTPUT}"
      - name: Detect changed files and create a pull request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: ${{ steps.parameters.outputs.COMMIT_MESSAGE }}
          title: ${{ steps.parameters.outputs.COMMIT_MESSAGE }}
          branch: ${{ steps.parameters.outputs.PR_BRANCH }}
          base: ${{ steps.parameters.outputs.PR_BASE }}
          labels: automated pr
          body: |
            This PR contains the following updates:

            - ${{ steps.parameters.outputs.COMMIT_MESSAGE }}

            This PR has been generated by
            [${{ github.workflow_ref }}](https://github.com/${{ github.repository }}/).
          delete-branch: true
          draft: false
