---
name: Formatting for Python
on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
        description: Path to a Python package or project
        default: .
      python-version:
        required: false
        type: string
        description: Python version to use (not applicable if uv.lock is present)
        default: 3.x
      uv-version:
        required: false
        type: string
        description: Version of uv to use (applicable only if uv.lock is present)
        default: latest
      use-black:
        required: false
        type: boolean
        description: Use black to format the code
        default: false
      use-isort:
        required: false
        type: boolean
        description: Use isort to sort import definitions
        default: false
      lint-before-pr:
        required: false
        type: boolean
        description: Run lint before creating a pull request
        default: true
      requirements-txt:
        required: false
        type: string
        description: Path to the requirements.txt file (not applicable if uv.lock is present)
        default: null
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
    secrets:
      GH_TOKEN:
        required: false
        description: GitHub token
permissions:
  contents: write
  pull-requests: write
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  format-and-pr:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Detect uv.lock or poetry.lock
        id: detect-lock-file
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ -f uv.lock ]]; then
            echo "lock_file=uv.lock" >> "${GITHUB_OUTPUT}"
          elif [[ -f poetry.lock ]]; then
            echo "lock_file=poetry.lock" >> "${GITHUB_OUTPUT}"
          else
            echo "lock_file=" >> "${GITHUB_OUTPUT}"
          fi
      - name: Set up uv
        if: steps.detect-lock-file.outputs.lock_file == 'uv.lock'
        uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1  # v6.5.0
        with:
          version: ${{ inputs.uv-version }}
      - name: Install packages using uv
        if: steps.detect-lock-file.outputs.lock_file == 'uv.lock'
        working-directory: ${{ inputs.package-path }}
        run: |
          uv sync --dev
          uv add --dev \
            ${{ inputs.use-black && 'black' || 'ruff' }} \
            ${{ inputs.use-isort && 'isort' || '' }}
          echo "EXECUTOR=uv run --directory ${PWD}" | tee -a "${GITHUB_ENV}"
      - name: Set up Python
        if: steps.detect-lock-file.outputs.lock_file != 'uv.lock'
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install packages
        if: steps.detect-lock-file.outputs.lock_file != 'uv.lock'
        env:
          LOCK_FILE: ${{ steps.detect-lock-file.outputs.lock_file }}
          REQUIREMENTS_TXT_PATH: ${{ inputs.requirements-txt }}
        working-directory: ${{ inputs.package-path }}
        run: |
          pip install -U --no-cache-dir pip
          if [[ -n "${REQUIREMENTS_TXT_PATH}" ]]; then
            pip install -U --no-cache-dir -r "${REQUIREMENTS_TXT_PATH}"
          fi
          if [[ "${LOCK_FILE}" == "poetry.lock" ]]; then
            pip install --no-cache-dir poetry
            poetry lock --no-interaction
            poetry add --group=dev --no-interaction \
              ${{ inputs.use-black && 'black' || 'ruff' }} \
              ${{ inputs.use-isort && 'isort' || '' }}
            poetry install --no-interaction
            echo "EXECUTOR=poetry run -C ${PWD}" | tee -a "${GITHUB_ENV}"
          else
            pip install --no-cache-dir \
              ${{ inputs.use-black && 'black' || 'ruff' }} \
              ${{ inputs.use-isort && 'isort' || '' }}
            echo "EXECUTOR=" | tee -a "${GITHUB_ENV}"
          fi
      - name: Format the code using ruff
        if: (! inputs.use-black)
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} ruff format .
      - name: Format the code using black
        if: inputs.use-black
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} black .
      - name: Sort Python import definitions using isort
        if: inputs.use-isort
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} isort .
      - name: Lint the code using ruff
        if: inputs.lint-before-pr
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} ruff check --fix --output-format=github .
      - name: Restore project files
        if: startsWith(env.EXECUTOR, 'poetry') || startsWith(env.EXECUTOR, 'uv')
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ "${EXECUTOR}" =~ ^uv ]]; then
            git restore pyproject.toml uv.lock
          elif [[ "${EXECUTOR}" =~ ^poetry ]]; then
            git restore pyproject.toml poetry.lock
          fi
      - name: Create output parameters
        id: parameters
        env:
          USE_BLACK: ${{ inputs.use-black }}
          USE_ISORT: ${{ inputs.use-isort }}
          PR_BASE: ${{ github.head_ref || github.ref_name }}
        run: |
          if ${USE_BLACK}; then
            formatters='black'
          else
            formatters='ruff'
          fi
          if ${USE_ISORT}; then
            formatters="${formatters} and isort"
          fi
          {
            echo "commit_message=Reformat Python code using ${formatters}"
            echo "pr_base=${PR_BASE}"
            echo "pr_branch=automatedpr/${PR_BASE}"
          } >> "${GITHUB_OUTPUT}"
      - name: Detect changed files and create a pull request
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e  # v7.0.8
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: ${{ steps.parameters.outputs.commit_message }}
          title: ${{ steps.parameters.outputs.commit_message }}
          branch: ${{ steps.parameters.outputs.pr_branch }}
          base: ${{ steps.parameters.outputs.pr_base }}
          labels: automated pr
          body: |
            This PR contains the following updates:

            - ${{ steps.parameters.outputs.commit_message }}

            This PR has been generated by
            [${{ github.workflow_ref }}](https://github.com/${{ github.repository }}/).
          delete-branch: true
          draft: false
