---
name: Lint and security scan for Python
on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
        description: Path to a Python package or project
        default: .
      python-version:
        required: false
        type: string
        description: Python version to use (not applicable if uv.lock is present)
        default: 3.x
      uv-version:
        required: false
        type: string
        description: Version of uv to use (applicable only if uv.lock is present)
        default: latest
      use-pyright:
        required: false
        type: boolean
        description: Use pyright to check types
        default: true
      use-ruff-format:
        required: false
        type: boolean
        description: Use ruff format to check code
        default: true
      use-mypy:
        required: false
        type: boolean
        description: Use mypy to check types
        default: false
      use-flake8:
        required: false
        type: boolean
        description: Use flake8 to lint the code
        default: false
      use-bandit:
        required: false
        type: boolean
        description: Use bandit to find security issues
        default: false
      additional-python-packages:
        required: false
        type: string
        description: Additional Python packages to install
        default: null
      requirements-txt:
        required: false
        type: string
        description: Path to the requirements.txt file (not applicable if uv.lock is present)
        default: null
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  lint-and-scan:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Detect uv.lock or poetry.lock
        id: detect-lock-file
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ -f uv.lock ]]; then
            echo "lock_file=uv.lock" >> "${GITHUB_OUTPUT}"
          elif [[ -f poetry.lock ]]; then
            echo "lock_file=poetry.lock" >> "${GITHUB_OUTPUT}"
          else
            echo "lock_file=" >> "${GITHUB_OUTPUT}"
          fi
      - name: Set up uv
        if: steps.detect-lock-file.outputs.lock_file == 'uv.lock'
        uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6  # v6.6.1
        with:
          version: ${{ inputs.uv-version }}
      - name: Install packages using uv
        if: steps.detect-lock-file.outputs.lock_file == 'uv.lock'
        working-directory: ${{ inputs.package-path }}
        run: |
          uv sync --dev
          uv add --dev \
            ${{ inputs.use-flake8 && 'flake8' || '' }} \
            ${{ inputs.use-bandit && 'bandit' || '' }} \
            ${{ inputs.use-mypy && 'mypy' || '' }} \
            ${{ inputs.use-pyright && 'pyright' || '' }} \
            ruff
          for p in $(echo "${{ inputs.additional-python-packages }}" | tr ' ' '\n'); do
            if [[ -n "${p}" ]]; then
              uv add --dev "${p}"
            fi
          done
          echo "EXECUTOR=uv run --directory ${PWD}" | tee -a "${GITHUB_ENV}"
      - name: Set up Python
        if: steps.detect-lock-file.outputs.lock_file != 'uv.lock'
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install packages
        if: steps.detect-lock-file.outputs.lock_file != 'uv.lock'
        env:
          LOCK_FILE: ${{ steps.detect-lock-file.outputs.lock_file }}
          ADDITIONAL_PYTHON_PACKAGES: ${{ inputs.additional-python-packages }}
          REQUIREMENTS_TXT_PATH: ${{ inputs.requirements-txt }}
        working-directory: ${{ inputs.package-path }}
        run: |
          pip install -U --no-cache-dir pip
          if [[ -n "${REQUIREMENTS_TXT_PATH}" ]]; then
            pip install -U --no-cache-dir -r "${REQUIREMENTS_TXT_PATH}"
          fi
          if [[ "${LOCK_FILE}" == "poetry.lock" ]]; then
            pip install --no-cache-dir poetry
            poetry lock --no-interaction
            poetry add --group=dev --no-interaction \
              ${{ inputs.use-flake8 && 'flake8' || '' }} \
              ${{ inputs.use-bandit && 'bandit' || '' }} \
              ${{ inputs.use-mypy && 'mypy' || '' }} \
              ${{ inputs.use-pyright && 'pyright' || '' }} \
              ruff
            for p in $(echo "${ADDITIONAL_PYTHON_PACKAGES}" | tr ' ' '\n'); do
              if [[ -n "${p}" ]]; then
                poetry add --group=dev --no-interaction "${p}"
              fi
            done
            poetry install --no-interaction --no-root
            echo "EXECUTOR=poetry run -C ${PWD}" | tee -a "${GITHUB_ENV}"
          else
            pip install --no-cache-dir \
              ${{ inputs.use-flake8 && 'flake8' || '' }} \
              ${{ inputs.use-bandit && 'bandit' || '' }} \
              ${{ inputs.use-mypy && 'mypy' || '' }} \
              ${{ inputs.use-pyright && 'pyright' || '' }} \
              ruff
            for p in $(echo "${ADDITIONAL_PYTHON_PACKAGES}" | tr ' ' '\n'); do
              if [[ -n "${p}" ]]; then
                pip install --no-cache-dir "${p}"
              fi
            done
            echo "EXECUTOR=" | tee -a "${GITHUB_ENV}"
          fi
      - name: Lint the code using ruff check
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} ruff check --output-format=github .
      - name: Check the code using ruff format
        if: inputs.use-ruff-format
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} ruff format --check .
      - name: Lint the code using flake8
        if: inputs.use-flake8
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} flake8 .
      - name: Find security issues using bandit
        if: inputs.use-bandit
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} bandit --recursive .
      - name: Check types using mypy
        if: inputs.use-mypy
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} mypy --install-types --non-interactive .
      - name: Check types using pyright
        if: inputs.use-pyright
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} pyright --threads=0 .
