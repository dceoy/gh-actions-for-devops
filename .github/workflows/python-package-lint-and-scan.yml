---
name: Lint and security scan for Python
on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
        description: Path to a Python package or project
        default: .
      python-version:
        required: false
        type: string
        description: Python version to use
        default: 3.x
      flake8-options:
        required: false
        type: string
        description: Additional options to pass to flake8
        default: null
      ruff-check-options:
        required: false
        type: string
        description: Additional options to pass to ruff check
        default: --output-format=github
      mypy-options:
        required: false
        type: string
        description: Additional options to pass to mypy
        default: --install-types --non-interactive
      pyright-options:
        required: false
        type: string
        description: Additional options to pass to pyright
        default: --threads=0
      bandit-options:
        required: false
        type: string
        description: Additional options to pass to bandit
        default: --recursive
      pypi-packages:
        required: false
        type: string
        description: Additional packages to install
        default: flake8-bugbear flake8-isort flake8-pyproject pep8-naming
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  lint-and-scan:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install packages
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ -f poetry.lock ]]; then
            pip install -U --no-cache-dir poetry
            poetry lock --no-update --no-interaction
            poetry add --group=dev --no-interaction \
              flake8 ruff mypy pyright bandit ${{ inputs.pypi-packages }}
            poetry install --no-interaction --no-root
            echo "EXECUTOR=poetry run -C ${PWD}" | tee -a "${GITHUB_ENV}"
          else
            pip install -U --no-cache-dir \
              flake8 ruff mypy pyright bandit ${{ inputs.pypi-packages }}
            if [[ -f requirements.txt ]]; then
              pip install -U --no-cache-dir -r requirements.txt
            fi
            echo "EXECUTOR=" | tee -a "${GITHUB_ENV}"
          fi
      - name: Lint the code using flake8
        run: >
          ${{ env.EXECUTOR }} flake8 ${{ inputs.flake8-options }} ${{ inputs.package-path }}
      - name: Lint the code using ruff
        run: >
          ${{ env.EXECUTOR }} ruff check ${{ inputs.ruff-check-options }} ${{ inputs.package-path }}
      - name: Check types using mypy
        run: >
          ${{ env.EXECUTOR }} mypy ${{ inputs.mypy-options }} ${{ inputs.package-path }}
      - name: Check types using pyright
        run: >
          ${{ env.EXECUTOR }} pyright ${{ inputs.pyright-options }} ${{ inputs.package-path }}
      - name: Find security issues using bandit
        run: >
          ${{ env.EXECUTOR }} bandit ${{ inputs.bandit-options }} ${{ inputs.package-path }}
