---
name: Security scan for Docker images
on:
  workflow_call:
    inputs:
      image-refs-json:
        required: true
        type: string
        description: JSON array of image references to scan
      image-artifact-name:
        required: false
        type: string
        description: Image tarball artifact name to download
        default: null
      registry:
        required: false
        type: string
        description: Image registry to login (e.g., ghcr.io, docker.io)
        default: null
      registry-user:
        required: false
        type: string
        description: Registry username
        default: ${{ github.repository_owner }}
      trivy-scanners:
        required: false
        type: string
        description: List of scanners to use
        default: vuln,secret,misconfig
      trivy-severity:
        required: false
        type: string
        description: Severity levels to fail the scan
        default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      trivy-ignore-unfixed:
        required: false
        type: boolean
        description: Ignore unpatched/unfixed vulnerabilities
        default: true
      trivy-exit-code:
        required: false
        type: number
        description: Exit code for pre-build scan
        default: 1
      trivy-config:
        required: false
        type: string
        description: Path to a Trivy config file
        default: null
      trivy-timeout:
        required: false
        type: string
        description: Timeout for the Trivy scan
        default: 5m0s
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
    secrets:
      DOCKER_TOKEN:
        required: false
        description: Registry token
      GH_TOKEN:
        required: false
        description: GitHub token
permissions:
  contents: write
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  scan:
    runs-on: ${{ inputs.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        image-ref: ${{ fromJSON(inputs.image-refs-json) }}
    steps:
      - name: Download the image tarball artifact
        if: inputs.image-artifact-name != null
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: ${{ inputs.image-artifact-name }}
          path: /tmp/
      - name: Load the image tarball
        if: inputs.image-artifact-name != null
        env:
          IMAGE_TAR: /tmp/${{ inputs.image-artifact-name }}.tar
        run: >
          docker load -i "${IMAGE_TAR}"
      - name: Checkout repository
        if: inputs.trivy-config != null
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Login to the image registry
        if: inputs.registry != null
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry-user }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8  # 0.33.1
        with:
          scan-type: image
          image-ref: ${{ matrix.image-ref }}
          scanners: ${{ inputs.trivy-scanners }}
          severity: ${{ inputs.trivy-severity }}
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          exit-code: 0
          trivy-config: ${{ inputs.trivy-config }}
          timeout: ${{ inputs.trivy-timeout }}
          format: github
          output: dependency-results.${{ strategy.job-index }}.sbom.json
          github-pat: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        env:
          TRIVY_CHECKS_REPOSITORY: public.ecr.aws/aquasecurity/trivy-checks
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db
