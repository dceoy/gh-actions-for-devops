---
name: Deployment of AWS resources using Terraform
on:
  workflow_call:
    inputs:
      aws-iam-role-to-assume:
        required: false
        type: string
        description: AWS IAM role ARN to assume
        default: null
      aws-region:
        required: false
        type: string
        description: AWS region to use
        default: us-east-1
      aws-profile-env-file:
        required: false
        type: string
        description: Environment file containing AWS IAM role ARN (ROLE_ARN) and region (REGION)
        default: null
      terraform-or-terragrunt-working-directory:
        required: false
        type: string
        description: Working directory for Terraform or Terragrunt
        default: .
      apply:
        required: false
        type: boolean
        description: Create or update infrastructure
        default: false
      terraform-version:
        required: false
        type: string
        description: Terraform version to use
        default: latest
      terragrunt-version:
        required: false
        type: string
        description: Terragrunt version to use
        default: null
      terraform-var-file:
        required: false
        type: string
        description: Terraform variable file to use
        default: null
      terraform-backend-config:
        required: false
        type: string
        description: Terraform backend configuration
        default: null
      use-docker:
        required: false
        type: boolean
        description: Use Docker
        default: false
      docker-metadata-action-images:
        required: false
        type: string
        description: Images for the Docker metadata action
        default: null
      docker-metadata-action-tags:
        required: false
        type: string
        description: Tags for the Docker metadata action
        default: |
          type=sha
          type=sha,format=long
          type=raw,value=latest
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
      docker-image-artifact-name:
        required: false
        type: string
        description: Docker image tarball artifact name to download
        default: null
      environment-variables:
        required: false
        type: string
        description: Environment variables to set (e.g., "FOO=bar")
        default: null
      environment-file:
        required: false
        type: string
        description: Environment file to set environment variables
        default: null
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
      timeout-minutes:
        required: false
        type: number
        description: Timeout in minutes for the job
        default: 360
permissions:
  contents: read    # This is required for actions/checkout
  id-token: write   # This is required for requesting the JWT
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  deploy:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Download the image tarball artifact
        if: inputs.apply && inputs.use-docker && inputs.docker-image-artifact-name != null
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4.3.0
        with:
          name: ${{ inputs.docker-image-artifact-name }}
          path: /tmp/
      - name: Load the image tarball
        if: inputs.apply && inputs.use-docker && inputs.docker-image-artifact-name != null
        env:
          IMAGE_TAR: /tmp/${{ inputs.docker-image-artifact-name }}.tar
        run: |
          docker load -i "${IMAGE_TAR}"
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      - name: Set environment variables from key-value pairs
        if: inputs.environment-variables != null
        env:
          ENVIRONMENT_VARIABLES: ${{ inputs.environment-variables }}
        run: |
          echo "${ENVIRONMENT_VARIABLES}" >> "${GITHUB_ENV}"
      - name: Set environment variables from file
        if: inputs.environment-file != null
        env:
          ENVIRONMENT_FILE: ${{ inputs.environment-file }}
        run: |
          cat "${ENVIRONMENT_FILE}" >> "${GITHUB_ENV}"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd  # v3.1.2
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Install Terragrunt
        if: inputs.terragrunt-version != null
        uses: dceoy/setup-terragrunt@a492a472c503fee3076bd39eb85d5fbe37265aca  # v1.0.1
        with:
          terragrunt-version: ${{ inputs.terragrunt-version }}
      - name: Set up QEMU
        if: inputs.use-docker
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392  # v3.6.0
      - name: Set up Docker Buildx
        if: inputs.use-docker
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2  # v3.10.0
      - name: Extract Docker metadata
        if: inputs.use-docker
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804  # v5.7.0
        with:
          images: ${{ inputs.docker-metadata-action-images }}
          tags: ${{ inputs.docker-metadata-action-tags }}
      - name: Read AWS profile environment file
        if: inputs.aws-profile-env-file != null
        id: aws-profile-env
        env:
          AWS_PROFILE_ENV_FILE: ${{ inputs.aws-profile-env-file }}
        run: |
          cat "${AWS_PROFILE_ENV_FILE}" >> "${GITHUB_OUTPUT}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df  # v4.2.1
        with:
          role-to-assume: ${{ inputs.aws-iam-role-to-assume || steps.aws-profile-env.outputs.ROLE_ARN || null }}
          aws-region: ${{ inputs.aws-region || steps.aws-profile-env.outputs.REGION || null }}
          role-session-name: github-actions-${{ github.run_id }}
      - name: Prepare working directories for Terraform and Terragrunt
        if: inputs.terragrunt-version != null
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        run: |
          terragrunt run-all init
      - name: Prepare working directories for Terraform
        if: inputs.terragrunt-version == null
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        env:
          TERRAFORM_BACKEND_CONFIG: ${{ inputs.terraform-backend-config }}
        run: |
          if [[ -n "${TERRAFORM_BACKEND_CONFIG}" ]]; then
            terraform init -backend-config="${TERRAFORM_BACKEND_CONFIG}"
          else
            terraform init
          fi
      - name: Check whether the configuration of Terraform and Terragrunt is valid
        if: inputs.terragrunt-version != null
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        run: |
          terragrunt run-all validate
      - name: Check whether the configuration of Terraform is valid
        if: inputs.terragrunt-version != null
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        run: |
          terraform validate
      - name: Show changes required by the current configuration of Terraform and Terragrunt
        if: (! inputs.apply) && inputs.terragrunt-version != null
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        run: |
          terragrunt run-all plan
      - name: Show changes required by the current configuration of Terraform
        if: (! inputs.apply) && inputs.terragrunt-version == null
        env:
          TERRAFORM_VAR_FILE: ${{ inputs.terraform-var-file }}
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        run: |
          if [[ -n "${TERRAFORM_VAR_FILE}" ]]; then
            terraform plan -var-file="${TERRAFORM_VAR_FILE}"
          else
            terraform plan
          fi
      - name: Create or update infrastructure using Terraform and Terragrunt
        if: inputs.apply && inputs.terragrunt-version != null
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        run: |
          terragrunt run-all apply --non-interactive
      - name: Create or update infrastructure using Terraform
        if: inputs.apply && inputs.terragrunt-version == null
        env:
          TERRAFORM_VAR_FILE: ${{ inputs.terraform-var-file }}
        working-directory: ${{ inputs.terraform-or-terragrunt-working-directory }}
        run: |
          if [[ -n "${TERRAFORM_VAR_FILE}" ]]; then
            terraform apply -auto-approve -var-file="${TERRAFORM_VAR_FILE}"
          else
            terraform apply -auto-approve
          fi
