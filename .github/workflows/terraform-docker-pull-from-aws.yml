---
name: Pull of the Docker images deployed to AWS using Terraform
on:
  workflow_call:
    inputs:
      aws-iam-role-to-assume:
        required: false
        type: string
        description: AWS IAM role ARN to assume
        default: null
      aws-region:
        required: false
        type: string
        description: AWS region to use
        default: us-east-1
      aws-profile-env-file:
        required: false
        type: string
        description: Path to the file containing the AWS profile environment variables
        default: null
      command-working-directory:
        required: false
        type: string
        description: Working directory for Terraform or Terragrunt
        default: .
      terraform-options:
        required: false
        type: string
        description: Additional options to pass to terraform
        default: null
      terraform-init-options:
        required: false
        type: string
        description: Additional options to pass to terraform init
        default: null
      terraform-output-options:
        required: false
        type: string
        description: Additional options to pass to terraform output
        default: null
      terraform-version:
        required: false
        type: string
        description: Terraform version to use
        default: latest
      terragrunt-options:
        required: false
        type: string
        description: Additional options to pass to terragrunt
        default: null   # --terragrunt-non-interactive
      terragrunt-version:
        required: false
        type: string
        description: Terragrunt version to use
        default: null
      terraform-output-pattern-for-docker-image-uri:
        required: false
        type: string
        description: Terraform output variable pattern for the Docker image URI
        default: image_uri
      docker-image-artifact-name:
        required: false
        type: string
        description: Docker image tarball artifact name to download
        default: null
      docker-image-artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  pull-and-save:
    runs-on: ubuntu-latest
    env:
      IMAGE_URI_LIST_TXT: /tmp/docker-registry-imageurls.${{ github.run_id }}.txt
      IMAGE_TAR: /tmp/${{ inputs.docker-image-artifact-name }}.tar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Install Terragrunt
        if: inputs.terragrunt-version != null
        env:
          TG_VERSION: ${{ inputs.terragrunt-version }}
        run: |
          if [[ "${TG_VERSION}" == 'latest' ]]; then
            url="$( \
              curl -sSL https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest \
                | jq -r '.assets[] | select(.name | contains("linux_amd64")) | .browser_download_url' \
            )"
          else
            url="https://github.com/gruntwork-io/terragrunt/releases/download/${TG_VERSION}/terragrunt_linux_amd64"
          fi
          curl -sSL -o /usr/local/bin/terragrunt "${url}"
          chmod +x /usr/local/bin/terragrunt
      - name: Set AWS profile environment variables
        id: aws-profile-env
        run: |
          if [[ -n "${{ inputs.aws-profile-env-file }}" ]]; then
            source ${{ inputs.aws-profile-env-file }}
          else
            ROLE_ARN="${{ inputs.aws-iam-role-to-assume }}"
            REGION="${{ inputs.aws-region }}"
          fi
          echo "ROLE_ARN=${ROLE_ARN}" >> "${GITHUB_OUTPUT}"
          echo "REGION=${REGION}" >> "${GITHUB_OUTPUT}"
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.aws-profile-env.outputs.ROLE_ARN }}
          aws-region: ${{ steps.aws-profile-env.outputs.REGION }}
          role-session-name: github-actions-${{ github.run_id }}
      - name: Prepare working directories for Terraform
        working-directory: ${{ inputs.command-working-directory }}
        run: |
          if ${{ inputs.terragrunt-version != null }}; then
            terragrunt init ${{ inputs.terragrunt-options }} ${{ inputs.terraform-init-options }}
          else
            terraform ${{ inputs.terraform-options }} init ${{ inputs.terraform-init-options }}
          fi
      - name: Retrieve the ECR repository URLs using Terraform
        working-directory: ${{ inputs.command-working-directory }}
        run: |
          {
            if ${{ inputs.terragrunt-version != null }}; then
              terragrunt output ${{ inputs.terragrunt-options }} ${{ inputs.terraform-output-options }}
            else
              terraform ${{ inputs.terraform-options }} output ${{ inputs.terraform-output-options }}
            fi
          } \
            | grep -e '^[^ ]*${{ inputs.terraform-output-pattern-for-docker-image-uri }}[^ ]* = ' \
            | cut -d '"' -f 2 \
            | tee "${IMAGE_URI_LIST_TXT}"
      - name: Pull the Docker images
        run: |
          xargs -L1 -t docker pull < "${IMAGE_URI_LIST_TXT}"
      - name: Save the Docker images to an image tarball
        run: |
          xargs -t docker save -o "${IMAGE_TAR}" < "${IMAGE_URI_LIST_TXT}"
      - name: Upload the image tarball
        if: inputs.docker-image-artifact-name != null
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.docker-image-artifact-name }}
          path: ${{ env.IMAGE_TAR }}
          retention-days: ${{ inputs.docker-image-artifact-retention-days }}
