---
name: Docker image build and push
on:
  workflow_call:
    inputs:
      registry:
        required: false
        type: string
        description: Image registry to login (e.g., ghcr.io, docker.io)
        default: ghcr.io
      registry-user:
        required: false
        type: string
        description: Registry username
        default: ${{ github.repository_owner }}
      image-name:
        required: false
        type: string
        description: Name of the image to push
        default: ${{ github.repository }}
      context:
        required: false
        type: string
        description: Build's context is the set of files located in the specified PATH or URL
        default: .
      file:
        required: false
        type: string
        description: Path to a Dockerfile
        default: Dockerfile
      platforms:
        required: false
        type: string
        description: List of target platforms for build
        default: linux/amd64,linux/arm64
      target:
        required: false
        type: string
        description: Target stage to build
        default: null
      build-args:
        required: false
        type: string
        description: List of build-time variables
        default: null
      secrets:
        required: false
        type: string
        description: List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
        default: null
      secret-envs:
        required: false
        type: string
        description: List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)
        default: null
      secret-files:
        required: false
        type: string
        description: List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
        default: null
      cosign:
        required: false
        type: boolean
        description: Sign the image with cosign
        default: false
      push:
        required: false
        type: boolean
        description: Push an image to the registry
        default: true
      load:
        required: false
        type: boolean
        description: Load the image after building
        default: false
      scan-before-build:
        required: false
        type: boolean
        description: Scan Dockerfile before build
        default: true
      scan-after-build:
        required: false
        type: boolean
        description: Scan the image after build
        default: true
      trivy-scanners:
        required: false
        type: string
        description: List of scanners to use
        default: vuln,secret,misconfig
      trivy-severity:
        required: false
        type: string
        description: Severity levels to fail the scan
        default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      trivy-ignore-unfixed:
        required: false
        type: boolean
        description: Ignore unpatched/unfixed vulnerabilities
        default: true
      trivy-filesystem-exit-code:
        required: false
        type: number
        description: Exit code for trivy filesystem
        default: 1
      trivy-image-exit-code:
        required: false
        type: number
        description: Exit code for trivy image
        default: 0
      trivy-config:
        required: false
        type: string
        description: Path to a Trivy config file
        default: null
      trivy-timeout:
        required: false
        type: string
        description: Timeout for the Trivy scan
        default: 5m0s
      docker-metadata-action-tags:
        required: false
        type: string
        description: Tags for the Docker metadata action
        default: |
          type=sha
          type=sha,format=long
          type=raw,value=latest
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
      image-artifact-name:
        required: false
        type: string
        description: Image tarball artifact name to upload
        default: null
      image-artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
      image-artifact-overwrite:
        required: false
        type: boolean
        description: Overwrite existing artifacts
        default: true
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
      timeout-minutes:
        required: false
        type: number
        description: Timeout in minutes for the job
        default: 360
    secrets:
      DOCKER_TOKEN:
        required: false
        description: Registry token
      GH_TOKEN:
        required: false
        description: GitHub token
    outputs:
      metadata-json:
        description: Metadata JSON extracted from Git reference and GitHub events
        value: ${{ jobs.build-and-push.outputs.metadata-json }}
      build-push-imageid:
        description: Docker image ID
        value: ${{ jobs.build-and-push.outputs.build-push-imageid }}
      build-push-digest:
        description: Docker image digest
        value: ${{ jobs.build-and-push.outputs.build-push-digest }}
permissions:
  contents: write
  packages: write
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  build-and-push:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      IMAGE_TAR: /tmp/${{ inputs.image-artifact-name }}.tar
    outputs:
      metadata-json: ${{ steps.meta.outputs.json }}
      build-push-imageid: ${{ steps.docker-build.outputs.imageid }}
      build-push-digest: ${{ steps.docker-build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install cosign
        if: inputs.cosign && inputs.push
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: v2.2.2
      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        if: inputs.scan-before-build
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: filesystem
          scan-ref: ${{ inputs.context }}
          scanners: ${{ inputs.trivy-scanners }}
          severity: ${{ inputs.trivy-severity }}
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          exit-code: ${{ inputs.trivy-filesystem-exit-code }}
          trivy-config: ${{ inputs.trivy-config }}
          timeout: ${{ inputs.trivy-timeout }}
          format: github
          output: dependency-results.sbom.json
          github-pat: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        env:
          TRIVY_CHECKS_REPOSITORY: public.ecr.aws/aquasecurity/trivy-checks
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db
      - name: Extract metadata from Git reference and GitHub events
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}
          tags: ${{ inputs.docker-metadata-action-tags }}
      - name: Login to the Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry-user }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push an image
        id: docker-build
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          platforms: ${{ inputs.platforms }}
          target: ${{ inputs.target }}
          build-args: ${{ inputs.build-args }}
          secrets: ${{ inputs.secrets }}
          secret-envs: ${{ inputs.secret-envs }}
          secret-files: ${{ inputs.secret-files }}
          push: ${{ inputs.push }}
          pull: true
          load: ${{ inputs.load }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Sign the images with GitHub OIDC Token
        if: inputs.cosign && inputs.push
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.docker-build.outputs.digest }}
        run: >
          echo "${TAGS}" | xargs -I{} -t cosign sign --yes "{}@${DIGEST}"
      - name: Pull Docker images
        if: inputs.push && (! inputs.load)
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: >
          echo "${TAGS}" | xargs -L1 -t docker pull
      - name: Save the image as a tarball
        if: inputs.image-artifact-name != null
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: >
          echo "${TAGS}" | xargs -t docker save -o "${IMAGE_TAR}"
      - name: Upload the image tarball
        if: inputs.image-artifact-name != null
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image-artifact-name }}
          path: ${{ env.IMAGE_TAR }}
          retention-days: ${{ inputs.image-artifact-retention-days }}
          overwrite: ${{ inputs.image-artifact-overwrite }}
      - name: Run Trivy vulnerability scanner
        if: inputs.scan-after-build
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: image
          image-ref: ${{ fromJson(steps.meta.outputs.json).tags[0] }}
          scanners: ${{ inputs.trivy-scanners }}
          severity: ${{ inputs.trivy-severity }}
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          exit-code: ${{ inputs.trivy-image-exit-code }}
          trivy-config: ${{ inputs.trivy-config }}
          timeout: ${{ inputs.trivy-timeout }}
          format: github
          output: dependency-results.sbom.json
          github-pat: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        env:
          TRIVY_CHECKS_REPOSITORY: public.ecr.aws/aquasecurity/trivy-checks
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db
