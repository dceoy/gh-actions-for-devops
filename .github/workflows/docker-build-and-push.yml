---
name: Docker image build and push
on:
  workflow_call:
    inputs:
      registry:
        required: false
        type: string
        description: Registry to push the image to
        default: docker.io  # { docker.io, ghcr.io }
      image-name:
        required: false
        type: string
        description: Name of the image to push
        default: ${{ github.repository }}
      context:
        required: false
        type: string
        description: Build's context is the set of files located in the specified PATH or URL
        default: .
      file:
        required: false
        type: string
        description: Path to a Dockerfile
        default: Dockerfile
      build-args:
        required: false
        type: string
        description: List of build-time variables
        default: null
      platforms:
        required: false
        type: string
        description: List of target platforms for build
        default: linux/amd64  # { linux/amd64, linux/arm64, linux/arm/v7 }
      cosign:
        required: false
        type: boolean
        description: Sign the image with cosign
        default: false
      push:
        required: false
        type: boolean
        description: Push an image to the registry
        default: true
      lint-before-build:
        required: false
        type: boolean
        description: Lint Dockerfile before build
        default: true
      hadolint-failure-threshold:
        required: false
        type: string
        description: Failure threshold for hadolint
        default: error
      scan-after-build:
        required: false
        type: boolean
        description: Scan the image after build
        default: true
      trivy-exit-code:
        required: false
        type: number
        description: Exit code for Trivy
        default: 0
      trivy-severity:
        required: false
        type: string
        description: Severity levels to fail the scan
        default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      trivy-scanners:
        required: false
        type: string
        description: List of scanners to use
        default: vuln,secret
      docker-metadata-action-tags:
        required: false
        type: string
        description: Tags for the Docker metadata action
        default: |
          type=sha
          type=sha,format=long
          type=raw,value=latest
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
      image-artifact-name:
        required: false
        type: string
        description: Image tarball artifact name to upload
        default: null
      image-artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
    secrets:
      DOCKER_USER:
        required: false
        description: Registry user name
      DOCKER_TOKEN:
        required: false
        description: Registry token
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install cosign
        if: inputs.cosign && inputs.push
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: v2.2.2
      - name: Lint Dockerfile
        if: inputs.lint-before-build
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ inputs.file }}
          failure-threshold: ${{ inputs.hadolint-failure-threshold }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}
          tags: ${{ inputs.docker-metadata-action-tags }}
      - name: Login to the Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push an image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          tags: ${{ steps.meta.outputs.tags }}
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          build-args: ${{ inputs.build-args }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          pull: true
          load: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Save the image as a tarball
        if: inputs.image-artifact-name != null
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          IMAGE_TAR: /tmp/${{ inputs.image-artifact-name }}.tar
        run: >
          echo "${TAGS}" | xargs -t docker save -o "${IMAGE_TAR}"
      - name: Upload the image tarball
        if: inputs.image-artifact-name != null
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image-artifact-name }}
          path: /tmp/${{ inputs.image-artifact-name }}.tar
          retention-days: ${{ inputs.image-artifact-retention-days }}
      - name: Sign the images with GitHub OIDC Token
        if: inputs.cosign && inputs.push
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: >
          echo "${TAGS}" | xargs -t -I {} cosign sign --yes "{}@${DIGEST}"
      - name: Run Trivy vulnerability scanner
        if: inputs.scan-after-build
        uses: aquasecurity/trivy-action@0.21.0
        with:
          scan-type: image
          image-ref: ${{ steps.build-and-push.outputs.imageid }}
          exit-code: ${{ inputs.trivy-exit-code }}
          severity: ${{ inputs.trivy-severity }}
          scanners: ${{ inputs.trivy-scanners }}
          format: sarif
          output: trivy-results.sarif
      - name: Upload Trivy scan results to GitHub Security tab
        if: inputs.scan-after-build
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
