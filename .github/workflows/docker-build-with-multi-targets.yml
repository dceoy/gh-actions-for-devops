---
name: Docker image build and save for multiple build targets
on:
  workflow_call:
    inputs:
      image-name-to-target-stage-json:
        required: false
        type: string
        description: JSON object with image names as keys and target stages as values
        default: null
      context:
        required: false
        type: string
        description: Build's context is the set of files located in the specified PATH or URL
        default: .
      file:
        required: false
        type: string
        description: Path to a Dockerfile
        default: Dockerfile
      scan-before-build:
        required: false
        type: boolean
        description: Scan Dockerfile before build
        default: true
      trivy-scanners:
        required: false
        type: string
        description: List of scanners to use
        default: vuln,secret,misconfig
      trivy-severity:
        required: false
        type: string
        description: Severity levels to fail the scan
        default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      trivy-ignore-unfixed:
        required: false
        type: boolean
        description: Ignore unpatched/unfixed vulnerabilities
        default: true
      trivy-exit-code:
        required: false
        type: number
        description: Exit code for Trivy
        default: 1
      trivy-config:
        required: false
        type: string
        description: Path to a Trivy config file
        default: null
      trivy-timeout:
        required: false
        type: string
        description: Timeout for the Trivy scan
        default: 5m0s
      image-artifact-name:
        required: false
        type: string
        description: Image tarball artifact name to upload
        default: null
      image-artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
      timeout-minutes:
        required: false
        type: number
        description: Timeout in minutes for the job
        default: 360
    secrets:
      GH_TOKEN:
        required: false
        description: GitHub token
permissions:
  contents: write
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  build-and-save:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      IMAGE_TAR: /tmp/${{ inputs.image-artifact-name }}.tar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        if: inputs.scan-before-build
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: filesystem
          scan-ref: ${{ inputs.context }}
          scanners: ${{ inputs.trivy-scanners }}
          severity: ${{ inputs.trivy-severity }}
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          exit-code: ${{ inputs.trivy-exit-code }}
          trivy-config: ${{ inputs.trivy-config }}
          timeout: ${{ inputs.trivy-timeout }}
          format: github
          output: dependency-results.sbom.json
          github-pat: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        env:
          TRIVY_CHECKS_REPOSITORY: public.ecr.aws/aquasecurity/trivy-checks
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db
      - name: Build images for multiple target stages
        env:
          IMAGE_NAME_TO_TARGET_STAGE_JSON: ${{ inputs.image-name-to-target-stage-json }}
          FILE: ${{ inputs.file }}
          CONTEXT: ${{ inputs.context }}
          DOCKER_BUILDX_BUILD_OPTIONS: --cache-to type=gha,mode=max --cache-from type=gha
        run: >
          echo "${IMAGE_NAME_TO_TARGET_STAGE_JSON}"
          | jq -r 'to_entries[] | "--tag \(.key) --target \(.value)"'
          | xargs -I{} -t bash -c
          "docker buildx build --load {} --file ${FILE} ${DOCKER_BUILDX_BUILD_OPTIONS} ${CONTEXT}"
      - name: Save the images as a tarball
        env:
          IMAGE_NAME_TO_TARGET_STAGE_JSON: ${{ inputs.image-name-to-target-stage-json }}
        run: >
          echo "${IMAGE_NAME_TO_TARGET_STAGE_JSON}"
          | jq -r 'keys[]'
          | xargs -t docker save -o "${IMAGE_TAR}"
      - name: Upload the image tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image-artifact-name }}
          path: ${{ env.IMAGE_TAR }}
          retention-days: ${{ inputs.image-artifact-retention-days }}
