---
name: Docker image build from a bake definition file
on:
  workflow_call:
    inputs:
      registry:
        required: false
        type: string
        description: Image registry to login (e.g., ghcr.io, docker.io)
        default: null
      registry-user:
        required: false
        type: string
        description: Image registry username
        default: ${{ github.repository_owner }}
      bake-source:
        required: false
        type: string
        description: Context to build from
        default: .
      bake-files:
        required: false
        type: string
        description: List of bake definition files
        default: null
      bake-allow:
        required: false
        type: string
        description: List of the resources accessible from build
        default: null
      bake-set:
        required: false
        type: string
        description: List of targets values to override
        default: null
      push:
        required: false
        type: boolean
        description: Push images to the registry
        default: true
      provenance:
        required: false
        type: boolean
        description: Generate provenance attestation for the build
        default: false
      environment-variables:
        required: false
        type: string
        description: Environment variables to set (e.g., "FOO=bar")
        default: null
      environment-file:
        required: false
        type: string
        description: Environment file to set environment variables
        default: null
      pull-images-if-exist:
        required: false
        type: boolean
        description: Pull images before building
        default: false
      scan-before-build:
        required: false
        type: boolean
        description: Scan Dockerfile before build
        default: true
      scan-after-build:
        required: false
        type: boolean
        description: Scan images after build
        default: true
      hadolint-dockerfile:
        required: false
        type: string
        description: Dockerfile name to lint
        default: Dockerfile
      hadolint-failure-threshold:
        required: false
        type: string
        description: Hadolint failure threshold
        default: error
      hadolint-recursive:
        required: false
        type: boolean
        description: Search for Dockerfile recursively from the project root
        default: true
      trivy-scan-ref:
        required: false
        type: string
        description: Scan reference
        default: .
      trivy-scanners:
        required: false
        type: string
        description: List of scanners to use
        default: vuln,secret,misconfig
      trivy-severity:
        required: false
        type: string
        description: Severity levels to fail the scan
        default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      trivy-ignore-unfixed:
        required: false
        type: boolean
        description: Ignore unpatched/unfixed vulnerabilities
        default: true
      trivy-filesystem-exit-code:
        required: false
        type: number
        description: Exit code for trivy filesystem
        default: 1
      trivy-image-exit-code:
        required: false
        type: number
        description: Exit code for trivy image
        default: 0
      trivy-config:
        required: false
        type: string
        description: Path to a Trivy config file
        default: null
      trivy-timeout:
        required: false
        type: string
        description: Timeout for the Trivy scan
        default: 5m0s
      image-artifact-name:
        required: false
        type: string
        description: Image tarball artifact name to upload
        default: docker-images
      image-artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
      image-artifact-overwrite:
        required: false
        type: boolean
        description: Overwrite existing artifacts
        default: true
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
      timeout-minutes:
        required: false
        type: number
        description: Timeout in minutes for the job
        default: 360
    secrets:
      DOCKER_TOKEN:
        required: false
        description: Registry token
      GH_TOKEN:
        required: false
        description: GitHub token
    outputs:
      bake-metadata-json:
        description: Build result metadata
        value: ${{ jobs.bake.outputs.bake-metadata-json }}
permissions:
  contents: write
  packages: write
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  prebuild-lint-and-scan:
    if: >
      inputs.scan-before-build
    uses: ./.github/workflows/docker-lint-and-scan.yml
    with:
      hadolint-dockerfile: ${{ inputs.hadolint-dockerfile }}
      hadolint-failure-threshold: ${{ inputs.hadolint-failure-threshold }}
      hadolint-recursive: ${{ inputs.hadolint-recursive }}
      trivy-scan-ref: ${{ inputs.trivy-scan-ref }}
      trivy-scanners: ${{ inputs.trivy-scanners }}
      trivy-severity: ${{ inputs.trivy-severity }}
      trivy-ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
      trivy-exit-code: ${{ inputs.trivy-filesystem-exit-code }}
      trivy-config: ${{ inputs.trivy-config }}
      trivy-timeout: ${{ inputs.trivy-timeout }}
      runs-on: ${{ inputs.runs-on }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
  bake:
    if: >
      (! (failure() || cancelled()))
    needs:
      - prebuild-lint-and-scan
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      IMAGE_TAR: /tmp/${{ inputs.image-artifact-name }}.tar
    outputs:
      bake-metadata-json: ${{ steps.docker-bake.outputs.metadata }}
      image-refs-json: ${{ steps.extract-image-refs.outputs.image_refs_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Set environment variables from key-value pairs
        if: inputs.environment-variables != null
        env:
          ENVIRONMENT_VARIABLES: ${{ inputs.environment-variables }}
        run: |
          echo "${ENVIRONMENT_VARIABLES}" >> "${GITHUB_ENV}"
      - name: Set environment variables from file
        if: inputs.environment-file != null
        env:
          ENVIRONMENT_FILE: ${{ inputs.environment-file }}
        run: |
          cat "${ENVIRONMENT_FILE}" >> "${GITHUB_ENV}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392  # v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
      - name: Login to the Docker registry
        if: inputs.registry != null
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry-user }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Pull images if exist
        if: inputs.pull-images-if-exist
        id: docker-pull-before-build
        continue-on-error: true
        env:
          DOCKER_BUIDX_BAKE_SOURCE: ${{ inputs.bake-source }}
          DOCKER_BUIDX_BAKE_FILES: ${{ inputs.bake-files }}
        run: |
          if [[ -n "${DOCKER_BUIDX_BAKE_FILES}" ]]; then
            bake_print="$(docker buildx bake --file "${DOCKER_BUIDX_BAKE_FILES}" --print)"
          else
            bake_print="$(cd "${DOCKER_BUIDX_BAKE_SOURCE}" && docker buildx bake --print)"
          fi
          jq -r '.target[].tags[]' <<< "${bake_print}" \
            | xargs -L1 -t docker pull
          jq -cr '[.target[].tags[]] | "IMAGE_REFS_JSON=\(.)"' <<< "${bake_print}" \
            | tee -a "${GITHUB_ENV}"
      - name: Build images
        if: (! inputs.pull-images-if-exist) || steps.docker-pull-before-build.outcome != 'success'
        id: docker-bake
        uses: docker/bake-action@3acf805d94d93a86cce4ca44798a76464a75b88c  # v6.9.0
        with:
          source: ${{ (! inputs.bake-files) && inputs.bake-source || null }}
          files: ${{ inputs.bake-files }}
          allow: ${{ inputs.bake-allow }}
          set: |
            ${{ inputs.bake-set }}
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
          pull: true
          push: ${{ inputs.push }}
          load: ${{ ! inputs.push }}
          provenance: ${{ inputs.provenance }}
          github-token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Extract image refs
        id: extract-image-refs
        env:
          BAKE_OUTPUT_METADATA_JSON: ${{ steps.docker-bake.outputs.metadata }}
        run: |
          if [[ -n "${BAKE_OUTPUT_METADATA_JSON}" ]]; then
            jq -cr '[.[] | ."image.name"?] | "image_refs_json=\(.)"' <<< "${BAKE_OUTPUT_METADATA_JSON}" \
              | tee -a "${GITHUB_OUTPUT}"
          else
            echo "image_refs_json=${IMAGE_REFS_JSON}" | tee -a "${GITHUB_OUTPUT}"
          fi
      - name: Pull the images
        if: inputs.push
        env:
          IMAGE_REFS_JSON: ${{ steps.extract-image-refs.outputs.image_refs_json }}
        run: >
          jq -r '.[]' <<<"${IMAGE_REFS_JSON}" | xargs -L1 -t docker pull
      - name: Save the images as a tarball
        env:
          IMAGE_REFS_JSON: ${{ steps.extract-image-refs.outputs.image_refs_json }}
        run: >
          jq -r '.[]' <<<"${IMAGE_REFS_JSON}" | xargs -t docker save -o "${IMAGE_TAR}"
      - name: Upload the image tarball
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ inputs.image-artifact-name }}
          path: ${{ env.IMAGE_TAR }}
          retention-days: ${{ inputs.image-artifact-retention-days }}
          overwrite: ${{ inputs.image-artifact-overwrite }}
  postbuild-scan:
    if: >
      inputs.scan-after-build
    needs:
      - bake
    uses: ./.github/workflows/docker-image-scan.yml
    with:
      image-refs-json: ${{ needs.bake.outputs.image-refs-json }}
      image-artifact-name: ${{ inputs.image-artifact-name }}
      trivy-scanners: ${{ inputs.trivy-scanners }}
      trivy-severity: ${{ inputs.trivy-severity }}
      trivy-ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
      trivy-exit-code: ${{ inputs.trivy-image-exit-code }}
      trivy-config: ${{ inputs.trivy-config }}
      trivy-timeout: ${{ inputs.trivy-timeout }}
      runs-on: ${{ inputs.runs-on }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
