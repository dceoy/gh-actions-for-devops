---
name: Test for Python Package
on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
        description: Path to a Python package or project
        default: .
      python-version:
        required: false
        type: string
        description: Python version to use (not applicable if uv.lock is present)
        default: 3.x
      uv-version:
        required: false
        type: string
        description: Version of uv to use (applicable only if uv.lock is present)
        default: latest
      additional-python-packages:
        required: false
        type: string
        description: Additional Python packages to install
        default: null
      requirements-txt:
        required: false
        type: string
        description: Path to the requirements.txt file (not applicable if uv.lock is present)
        default: null
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  test:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Detect uv.lock or poetry.lock
        id: detect-lock-file
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ -f uv.lock ]]; then
            echo "lock_file=uv.lock" >> "${GITHUB_OUTPUT}"
          elif [[ -f poetry.lock ]]; then
            echo "lock_file=poetry.lock" >> "${GITHUB_OUTPUT}"
          else
            echo "lock_file=" >> "${GITHUB_OUTPUT}"
          fi
      - name: Set up uv
        if: steps.detect-lock-file.outputs.lock_file == 'uv.lock'
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          version: ${{ inputs.uv-version }}
      - name: Install packages using uv
        if: steps.detect-lock-file.outputs.lock_file == 'uv.lock'
        working-directory: ${{ inputs.package-path }}
        run: |
          uv sync --dev
          for p in $(echo "${{ inputs.additional-python-packages }}" | tr ' ' '\n'); do
            if [[ -n "${p}" ]]; then
              uv add --dev "${p}"
            fi
          done
          echo "EXECUTOR=uv run --directory ${PWD}" | tee -a "${GITHUB_ENV}"
      - name: Set up Python
        if: steps.detect-lock-file.outputs.lock_file != 'uv.lock'
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install packages
        if: steps.detect-lock-file.outputs.lock_file != 'uv.lock'
        env:
          LOCK_FILE: ${{ steps.detect-lock-file.outputs.lock_file }}
          ADDITIONAL_PYTHON_PACKAGES: ${{ inputs.additional-python-packages }}
          REQUIREMENTS_TXT_PATH: ${{ inputs.requirements-txt }}
        working-directory: ${{ inputs.package-path }}
        run: |
          pip install -U --no-cache-dir pip
          if [[ -n "${REQUIREMENTS_TXT_PATH}" ]]; then
            pip install -U --no-cache-dir -r "${REQUIREMENTS_TXT_PATH}"
          fi
          if [[ "${LOCK_FILE}" == "poetry.lock" ]]; then
            pip install --no-cache-dir poetry
            poetry lock --no-interaction
            for p in $(echo "${ADDITIONAL_PYTHON_PACKAGES}" | tr ' ' '\n'); do
              if [[ -n "${p}" ]]; then
                poetry add --group=dev --no-interaction "${p}"
              fi
            done
            poetry install --no-interaction --no-root
            echo "EXECUTOR=poetry run -C ${PWD}" | tee -a "${GITHUB_ENV}"
          else
            for p in $(echo "${ADDITIONAL_PYTHON_PACKAGES}" | tr ' ' '\n'); do
              if [[ -n "${p}" ]]; then
                pip install --no-cache-dir "${p}"
              fi
            done
            echo "EXECUTOR=" | tee -a "${GITHUB_ENV}"
          fi
      - name: Run tests with pytest
        working-directory: ${{ inputs.package-path }}
        run: >
          ${{ env.EXECUTOR }} pytest
