---
name: Python package release on PyPI and GitHub
on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
        description: Path to a Python package or project
        default: .
      create-releases:
        required: false
        type: boolean
        description: Create GitHub and PyPI releases
        default: true
      publish-to-testpypi-before-pypi:
        required: false
        type: boolean
        description: Publish to TestPyPI before PyPI
        default: false
      python-version:
        required: false
        type: string
        description: Python version to use (not applicable if uv.lock is present)
        default: 3.x
      uv-version:
        required: false
        type: string
        description: Version of uv to use (applicable only if uv.lock is present)
        default: latest
      requirements-txt:
        required: false
        type: string
        description: Path to the requirements.txt file (not applicable if uv.lock is present)
        default: null
      artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
      artifact-overwrite:
        required: false
        type: boolean
        description: Overwrite existing artifacts
        default: true
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
    secrets:
      PYPI_API_TOKEN:
        required: true
        description: PyPI API token
      GH_TOKEN:
        required: false
        description: GitHub token
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  build:
    name: Build the Python 🐍 distribution 📦
    runs-on: ${{ inputs.runs-on }}
    outputs:
      project-name: ${{ steps.read-project-name.outputs.project_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Detect uv.lock or poetry.lock
        id: detect-lock-file
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ -f uv.lock ]]; then
            echo "lock_file=uv.lock" >> "${GITHUB_OUTPUT}"
          elif [[ -f poetry.lock ]]; then
            echo "lock_file=poetry.lock" >> "${GITHUB_OUTPUT}"
          else
            echo "lock_file=" >> "${GITHUB_OUTPUT}"
          fi
      - name: Set up uv
        if: steps.detect-lock-file.outputs.lock_file == 'uv.lock'
        uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6  # v6.6.1
        with:
          version: ${{ inputs.uv-version }}
      - name: Set up Python
        if: steps.detect-lock-file.outputs.lock_file != 'uv.lock'
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: ${{ inputs.python-version }}
      - name: Read the project name
        id: read-project-name
        working-directory: ${{ inputs.package-path }}
        shell: python {0}
        run: |
          import os
          import tomllib
          with open("pyproject.toml", "rb") as f:
              d = tomllib.load(f)
          if "project" in d and "name" in d["project"]:
              name = d["project"]["name"]
          elif "tool" in d and "poetry" in d["tool"] and "name" in d["tool"]["poetry"]:
              name = d["tool"]["poetry"]["name"]
          else:
              raise ValueError(f"project name not found in pyproject.toml: {d}")
          print(f"project_name={name}")
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              print(f"project_name={name}", file=f)
      - name: Build a binary wheel and a source tarball
        env:
          LOCK_FILE: ${{ steps.detect-lock-file.outputs.lock_file }}
          REQUIREMENTS_TXT_PATH: ${{ inputs.requirements-txt }}
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ "${LOCK_FILE}" == "uv.lock" ]]; then
            uv build
          else
            pip install -U --no-cache-dir pip
            if [[ -n "${REQUIREMENTS_TXT_PATH}" ]]; then
              pip install -U --no-cache-dir -r "${REQUIREMENTS_TXT_PATH}"
            fi
            if [[ "${LOCK_FILE}" == "poetry.lock" ]]; then
              pip install --no-cache-dir poetry
              poetry build --format=wheel --no-interaction
            else
              pip install --no-cache-dir build
              python -m build
            fi
          fi
          mv dist /tmp/${{ steps.read-project-name.outputs.project_name }}_dist
      - name: Store the distribution packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: python-package-distributions
          path: /tmp/${{ steps.read-project-name.outputs.project_name }}_dist/
          retention-days: ${{ inputs.artifact-retention-days }}
          overwrite: ${{ inputs.artifact-overwrite }}
  publish-to-testpypi:
    name: Publish the Python 🐍 distribution 📦 to TestPyPI
    if: >
      startsWith(github.ref, 'refs/tags/')
      && inputs.create-releases
      && inputs.publish-to-testpypi-before-pypi
    needs:
      - build
    runs-on: ${{ inputs.runs-on }}
    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ needs.build.outputs.project-name }}
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to TestPyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e  # v1.13.0
        with:
          repository-url: https://test.pypi.org/legacy/
  github-release:
    name: Sign the Python 🐍 distribution 📦 with Sigstore and upload them to GitHub Release
    if: >
      startsWith(github.ref, 'refs/tags/')
      && inputs.create-releases
      && (! (failure() || cancelled()))
    needs:
      - build
      - publish-to-testpypi
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: python-package-distributions
          path: dist/
      - name: Validate the version-tag consistency
        env:
          TAG_NAME: ${{ github.ref_name }}
        run: |
          v="$( \
            find dist -type f -name '${{ needs.build.outputs.project-name }}-*' -exec basename {} \; \
              | head -n 1 \
              | cut -d '-' -f 2 \
          )"
          v="${v%.tar.gz}"
          if [[ "${TAG_NAME}" != "${v}" ]] && [[ "${TAG_NAME}" != "v${v}" ]]; then
            echo "The tag (${TAG_NAME}) is inconsistent with the version (${v})." && exit 1
          fi
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@f7ad0af51a5648d09a20d00370f0a91c3bdf8f84  # v3.0.1
        with:
          inputs: >-
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} --repo ${{ github.repository }} --generate-notes --verify-tag
      - name: Upload artifact signatures to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: |
          gh release upload ${{ github.ref_name }} dist/** --repo ${{ github.repository }}
  publish-to-pypi:
    name: Publish the Python 🐍 distribution 📦 to PyPI
    if: >
      startsWith(github.ref, 'refs/tags/')
      && inputs.create-releases
      && (! (failure() || cancelled()))
    needs:
      - build
      - publish-to-testpypi
      - github-release
    runs-on: ${{ inputs.runs-on }}
    environment:
      name: pypi
      url: https://pypi.org/p/${{ needs.build.outputs.project-name }}
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e  # v1.13.0
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
