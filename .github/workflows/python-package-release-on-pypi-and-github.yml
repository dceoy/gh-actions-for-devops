---
name: Python package release on PyPI and GitHub
on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
        description: Path to a Python package or project
        default: .
      python-version:
        required: false
        type: string
        description: Python version to use
        default: 3.x
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
    secrets:
      PYPI_API_TOKEN:
        required: true
        description: PyPI API token
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  build:
    name: Build the Python üêç distribution üì¶
    runs-on: ${{ inputs.runs-on }}
    outputs:
      project-name: ${{ steps.read-project-name.outputs.project-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Read the project name
        id: read-project-name
        working-directory: ${{ inputs.package-path }}
        shell: python3 {0}
        run: |
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              d = tomllib.load(f)
              name = (d.get('project') or d.get('tool.poetry') or dict()).get('name')
          assert name, 'project name not found'
          with open('${GITHUB_OUTPUT}', 'a') as f:
              print(f'project-name={name}', file=f)
      - name: Build a binary wheel and a source tarball
        working-directory: ${{ inputs.package-path }}
        run: |
          if [[ -f poetry.lock ]]; then
            python3 -m pip install -U --no-cache-dir poetry
            python3 -m poetry build --format=wheel --no-interaction
          else
            python3 -m pip install -U --no-cache-dir build
            python3 -m build
          fi
          mv dist /tmp/${{ steps.read-project-name.outputs.project-name }}_dist
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: /tmp/${{ steps.read-project-name.outputs.project-name }}_dist/
  publish-to-testpypi:
    name: Publish the Python üêç distribution üì¶ to TestPyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ${{ inputs.runs-on }}
    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ needs.build.outputs.project-name }}
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
  github-release:
    name: Sign the Python üêç distribution üì¶ with Sigstore and upload them to GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
      - publish-to-testpypi
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.ref_name }} --repo ${{ github.repository }} --generate-notes
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: |
          gh release upload ${{ github.ref_name }} dist/** --repo ${{ github.repository }}
  publish-to-pypi:
    name: Publish the Python üêç distribution üì¶ to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
      - publish-to-testpypi
      - github-release
    runs-on: ${{ inputs.runs-on }}
    environment:
      name: pypi
      url: https://pypi.org/p/${{ needs.build.outputs.project-name }}
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
