---
name: Docker image pull from AWS
on:
  workflow_call:
    inputs:
      image-names:
        required: false
        type: string
        description: Docker image names to pull (separated by spaces or returns)
        default: null
      tag-source-to-target-json:
        required: false
        type: string
        description: JSON object with source image names as keys and target image tags as values
        default: null
      aws-iam-role-to-assume:
        required: false
        type: string
        description: AWS IAM role ARN to assume
        default: null
      aws-region:
        required: false
        type: string
        description: AWS region to use
        default: us-east-1
      aws-profile-env-file:
        required: false
        type: string
        description: Path to the file containing the AWS profile environment variables
        default: null
      image-artifact-name:
        required: false
        type: string
        description: Docker image tarball artifact name to download
        default: docker-image
      image-artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
      timeout-minutes:
        required: false
        type: number
        description: Timeout in minutes for the job
        default: 360
permissions:
  contents: read    # This is required for actions/checkout
  id-token: write   # This is required for requesting the JWT
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  pull-and-save:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      IMAGE_NAMES: ${{ inputs.image-names }}
      TAG_SOURCE_TO_TARGET_JSON: ${{ inputs.tag-source-to-target-json }}
      IMAGE_URI_LIST_TXT: /tmp/docker-registry-imageurls.${{ github.run_id }}.txt
      IMAGE_TAR: /tmp/${{ inputs.image-artifact-name }}.tar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Read AWS profile environment file
        if: inputs.aws-profile-env-file != null
        id: aws-profile-env
        run: |
          cat ${{ inputs.aws-profile-env-file }} >> "${GITHUB_OUTPUT}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-iam-role-to-assume || steps.aws-profile-env.outputs.ROLE_ARN || null }}
          aws-region: ${{ inputs.aws-region || steps.aws-profile-env.outputs.REGION || null }}
          role-session-name: github-actions-${{ github.run_id }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Pull the Docker images
        run: |
          {
            if [[ -n "${IMAGE_NAMES}" ]]; then
              echo "${IMAGE_NAMES}" | tr ' ' '\n'
            elif [[ -n "${TAG_SOURCE_TO_TARGET_JSON}" ]]; then
              echo "${TAG_SOURCE_TO_TARGET_JSON}" | jq -r 'keys[]'
            fi
          } | sort -u -o "${IMAGE_URI_LIST_TXT}"
          xargs -L1 -t docker pull < "${IMAGE_URI_LIST_TXT}"
      - name: Tag the Docker images
        if: ${{ inputs.tag-source-to-target-json != null }}
        run: |
          echo "${TAG_SOURCE_TO_TARGET_JSON}" \
            | jq -r 'to_entries[] | "docker tag \(.key) \(.value)"' \
            | xargs -L1 -t bash -c
          echo "${TAG_SOURCE_TO_TARGET_JSON}" | jq -r '.[]' >> "${IMAGE_URI_LIST_TXT}"
          sort -u -o "${IMAGE_URI_LIST_TXT}" "${IMAGE_URI_LIST_TXT}"
      - name: Save the Docker images to an image tarball
        run: |
          xargs -t docker save -o "${IMAGE_TAR}" < "${IMAGE_URI_LIST_TXT}"
      - name: Upload the image tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image-artifact-name }}
          path: ${{ env.IMAGE_TAR }}
          retention-days: ${{ inputs.image-artifact-retention-days }}
