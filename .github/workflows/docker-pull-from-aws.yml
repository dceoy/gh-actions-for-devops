---
name: Docker image pull from AWS
on:
  workflow_call:
    inputs:
      image-names:
        required: false
        type: string
        description: Docker image names to pull (separated by spaces or returns)
        default: null
      tag-source-to-target-json:
        required: false
        type: string
        description: JSON object with source image names as keys and target image tags as values
        default: null
      aws-iam-role-to-assume:
        required: false
        type: string
        description: AWS IAM role ARN to assume
        default: null
      aws-region:
        required: false
        type: string
        description: AWS region to use
        default: us-east-1
      aws-profile-env-file:
        required: false
        type: string
        description: Path to the file containing the AWS profile environment variables
        default: null
      image-artifact-name:
        required: false
        type: string
        description: Docker image tarball artifact name to download
        default: docker-image
      image-artifact-retention-days:
        required: false
        type: number
        description: Number of days to retain artifacts
        default: 1
      image-artifact-overwrite:
        required: false
        type: boolean
        description: Overwrite existing artifacts
        default: true
      scan-after-pull:
        required: false
        type: boolean
        description: Scan the image after pull
        default: true
      trivy-scanners:
        required: false
        type: string
        description: List of scanners to use
        default: vuln,secret,misconfig
      trivy-severity:
        required: false
        type: string
        description: Severity levels to fail the scan
        default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      trivy-ignore-unfixed:
        required: false
        type: boolean
        description: Ignore unpatched/unfixed vulnerabilities
        default: true
      trivy-exit-code:
        required: false
        type: number
        description: Exit code for pre-build scan
        default: 1
      trivy-config:
        required: false
        type: string
        description: Path to a Trivy config file
        default: null
      trivy-timeout:
        required: false
        type: string
        description: Timeout for the Trivy scan
        default: 5m0s
      runs-on:
        required: false
        type: string
        description: GitHub Actions runner to use
        default: ubuntu-latest
      timeout-minutes:
        required: false
        type: number
        description: Timeout in minutes for the job
        default: 360
permissions:
  contents: read    # This is required for actions/checkout
  id-token: write   # This is required for requesting the JWT
defaults:
  run:
    shell: bash -euo pipefail {0}
    working-directory: .
jobs:
  pull-and-save:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      IMAGE_NAMES: ${{ inputs.image-names }}
      TAG_SOURCE_TO_TARGET_JSON: ${{ inputs.tag-source-to-target-json }}
      IMAGE_URI_LIST_TXT: /tmp/docker-registry-imageurls.${{ github.run_id }}.txt
      IMAGE_TAR: /tmp/${{ inputs.image-artifact-name }}.tar
    outputs:
      image-refs-json: ${{ steps.output-image-refs.outputs.image_refs_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Read AWS profile environment file
        if: inputs.aws-profile-env-file != null
        id: aws-profile-env
        env:
          AWS_PROFILE_ENV_FILE: ${{ inputs.aws-profile-env-file }}
        run: |
          cat "${AWS_PROFILE_ENV_FILE}" >> "${GITHUB_OUTPUT}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df  # v4.2.1
        with:
          role-to-assume: ${{ inputs.aws-iam-role-to-assume || steps.aws-profile-env.outputs.ROLE_ARN || null }}
          aws-region: ${{ inputs.aws-region || steps.aws-profile-env.outputs.REGION || null }}
          role-session-name: github-actions-${{ github.run_id }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076  # v2.0.1
      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076  # v2.0.1
        with:
          registry-type: public
        env:
          AWS_REGION: us-east-1
      - name: Pull the Docker images
        run: |
          {
            if [[ -n "${IMAGE_NAMES}" ]]; then
              echo "${IMAGE_NAMES}" | tr ' ' '\n'
            elif [[ -n "${TAG_SOURCE_TO_TARGET_JSON}" ]]; then
              echo "${TAG_SOURCE_TO_TARGET_JSON}" | jq -r 'keys[]'
            fi
          } | sort -u -o "${IMAGE_URI_LIST_TXT}"
          xargs -L1 -t docker pull < "${IMAGE_URI_LIST_TXT}"
      - name: Output the image references
        id: output-image-refs
        run: |
          jq -rRs 'split("\n")[:-1] | "image_refs_json=\(.)"' < "${IMAGE_URI_LIST_TXT}"
      - name: Tag the Docker images
        if: inputs.tag-source-to-target-json != null
        run: |
          echo "${TAG_SOURCE_TO_TARGET_JSON}" \
            | jq -r 'to_entries[] | "docker tag \(.key) \(.value)"' \
            | xargs -L1 -t bash -c
          echo "${TAG_SOURCE_TO_TARGET_JSON}" | jq -r 'values[]' >> "${IMAGE_URI_LIST_TXT}"
          sort -u -o "${IMAGE_URI_LIST_TXT}" "${IMAGE_URI_LIST_TXT}"
      - name: Save the Docker images to an image tarball
        run: |
          xargs -t docker save -o "${IMAGE_TAR}" < "${IMAGE_URI_LIST_TXT}"
      - name: Upload the image tarball
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ inputs.image-artifact-name }}
          path: ${{ env.IMAGE_TAR }}
          retention-days: ${{ inputs.image-artifact-retention-days }}
          overwrite: ${{ inputs.image-artifact-overwrite }}
  postpull-scan:
    if: >
      inputs.scan-after-pull
    needs:
      - pull-and-save
    uses: ./.github/workflows/docker-image-scan.yml
    with:
      image-refs-json: ${{ needs.pull-and-save.outputs.image-refs-json }}
      image-artifact-name: ${{ inputs.image-artifact-name }}
      trivy-scanners: ${{ inputs.trivy-scanners }}
      trivy-severity: ${{ inputs.trivy-severity }}
      trivy-ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
      trivy-exit-code: ${{ inputs.trivy-exit-code }}
      trivy-config: ${{ inputs.trivy-config }}
      trivy-timeout: ${{ inputs.trivy-timeout }}
      runs-on: ${{ inputs.runs-on }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
